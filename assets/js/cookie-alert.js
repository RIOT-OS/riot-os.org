/*
 * Based on Bootstrap Cookie Alert by Wruczek, adapted to use in riot-os.org
 * https://github.com/Wruczek/Bootstrap-Cookie-Alert
 * Released under MIT license
 */

/**
 * Script to keep track of user's preference regarding cookies. When the user expresses the choice
 * a cookie is stored for 12 months with the decision.
 *
 * See https://gdpr.eu/cookies/
 *
 * Events generated by the script:
 *  - "cookiesAccepted": Triggered on load if the cookie is present and states
 *          that the user accepted the usage of cookies. Triggered when the user
 *          accepts the cookies.
 *  - "cookiesRejected": Triggered on load if the cookie is present and states
 *          that the user rejected the usage of cookies. Triggered when the user
 *          rejects the cookies.
 *  - "cookiesAlertAccept": Triggered when the user accepts the cookies.
 *  - "cookiesAlertReject": Triggered when the user rejects the cookies.
 */

(function () {
    "use strict";

    const cookieName = "cookie_notice_accepted";
    var cookieAlert = document.querySelector(".cookiealert");
    var acceptCookies = document.querySelector(".acceptcookies");
    var rejectCookies = document.querySelector(".rejectcookies");

    if (!cookieAlert) {
       return;
    }

    cookieAlert.offsetHeight; // Force browser to trigger reflow (https://stackoverflow.com/a/39451131)

    // Try to find the cookieName cookie
    var cookie = getCookie(cookieName);

    switch (cookie) {
        // Cookies were accepted at some point already
        case "true":
            window.dispatchEvent(new Event("cookiesAccepted"));
            break;

        // Cookies were rejected at some point already
        case "false":
            window.dispatchEvent(new Event("cookiesRejected"));
            break;

        // Could not find a valid cookie
        default:
            cookieAlert.classList.add("show");
    }

    // When clicking on the agree button, create a 1 year
    // cookie to remember user's choice and close the banner
    acceptCookies.addEventListener("click", function () {
        setCookie(cookieName, true, 365);
        cookieAlert.classList.remove("show");

        // dispatch the accept event
        window.dispatchEvent(new Event("cookieAlertAccept"))
        window.dispatchEvent(new Event("cookiesAccepted"))
    });

    // When clicking on the reject button, create a 1 year
    // cookie to remember user's choice and close the banner
    rejectCookies.addEventListener("click", function () {
        setCookie(cookieName, false, 365);
        cookieAlert.classList.remove("show");

        // dispatch the reject event
        window.dispatchEvent(new Event("cookieAlertReject"))
        window.dispatchEvent(new Event("cookiesRejected"))
    });

    // Cookie functions from w3schools
    function setCookie(cname, cvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }

    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) === 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }
})();
